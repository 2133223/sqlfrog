{
  "funcName": "COLUMNS_UPDATED",
  "returnType": "varbinary",
  "description": "This function returns a varbinary bit pattern indicating the inserted or updated columns of a table or view. Use COLUMNS_UPDATED anywhere inside the body of a Transact-SQL INSERT or UPDATE trigger to test whether the trigger should execute certain actions.",
  "targetDBs": [
    "SQL Server (starting with 2008)",
    "Azure SQL Database"
  ],
  "category": "Trigger",
  "ansiCompatible": "",
  "package": "",
  "docLink": "https://docs.microsoft.com/en-gb/sql/t-sql/functions/columns-updated-transact-sql?view\u003dsql-server-2017",
  "sample": "USE AdventureWorks2012;  \nGO  \nIF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES  \n   WHERE TABLE_NAME \u003d \u0027employeeData\u0027)  \n   DROP TABLE employeeData;  \nIF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES  \n   WHERE TABLE_NAME \u003d \u0027auditEmployeeData\u0027)  \n   DROP TABLE auditEmployeeData;  \nGO  \nCREATE TABLE dbo.employeeData (  \n   emp_id int NOT NULL PRIMARY KEY,  \n   emp_bankAccountNumber char (10) NOT NULL,  \n   emp_salary int NOT NULL,  \n   emp_SSN char (11) NOT NULL,  \n   emp_lname nchar (32) NOT NULL,  \n   emp_fname nchar (32) NOT NULL,  \n   emp_manager int NOT NULL  \n   );  \nGO  \nCREATE TABLE dbo.auditEmployeeData (  \n   audit_log_id uniqueidentifier DEFAULT NEWID() PRIMARY KEY,  \n   audit_log_type char (3) NOT NULL,  \n   audit_emp_id int NOT NULL,  \n   audit_emp_bankAccountNumber char (10) NULL,  \n   audit_emp_salary int NULL,  \n   audit_emp_SSN char (11) NULL,  \n   audit_user sysname DEFAULT SUSER_SNAME(),  \n   audit_changed datetime DEFAULT GETDATE()  \n   );  \nGO  \nCREATE TRIGGER dbo.updEmployeeData   \nON dbo.employeeData   \nAFTER UPDATE AS  \n/* Check whether columns 2, 3 or 4 have been updated. If any or all  \ncolumns 2, 3 or 4 have been changed, create an audit record. The\nbitmask is: power(2, (2-1)) + power(2, (3-1)) + power(2, (4-1)) \u003d 14. To test   \nwhether all columns 2, 3, and 4 are updated, use \u003d 14 instead of \u003e 0  \n(below). */\n\n   IF (COLUMNS_UPDATED() \u0026 14) \u003e 0  \n/* Use IF (COLUMNS_UPDATED() \u0026 14) \u003d 14 to see whether all columns 2, 3,   \nand 4 are updated. */  \n      BEGIN  \n-- Audit OLD record.  \n      INSERT INTO dbo.auditEmployeeData  \n         (audit_log_type,  \n         audit_emp_id,  \n         audit_emp_bankAccountNumber,  \n         audit_emp_salary,  \n         audit_emp_SSN)  \n         SELECT \u0027OLD\u0027,   \n            del.emp_id,  \n            del.emp_bankAccountNumber,  \n            del.emp_salary,  \n            del.emp_SSN  \n         FROM deleted del;  \n\n-- Audit NEW record.  \n      INSERT INTO dbo.auditEmployeeData  \n         (audit_log_type,  \n         audit_emp_id,  \n         audit_emp_bankAccountNumber,  \n         audit_emp_salary,  \n         audit_emp_SSN)  \n         SELECT \u0027NEW\u0027,  \n            ins.emp_id,  \n            ins.emp_bankAccountNumber,  \n            ins.emp_salary,  \n            ins.emp_SSN  \n         FROM inserted ins;  \n   END;  \nGO  \n\n/* Inserting a new employee does not cause the UPDATE trigger to fire. */  \nINSERT INTO employeeData  \n   VALUES ( 101, \u0027USA-987-01\u0027, 23000, \u0027R-M53550M\u0027, N\u0027Mendel\u0027, N\u0027Roland\u0027, 32);  \nGO  \n\n/* Updating the employee record for employee number 101 to change the   \nsalary to 51000 causes the UPDATE trigger to fire and an audit trail to   \nbe produced. */  \n\nUPDATE dbo.employeeData  \n   SET emp_salary \u003d 51000  \n   WHERE emp_id \u003d 101;  \nGO  \nSELECT * FROM auditEmployeeData;  \nGO  \n\n/* Updating the employee record for employee number 101 to change both   \nthe bank account number and social security number (SSN) causes the   \nUPDATE trigger to fire and an audit trail to be produced. */  \n\nUPDATE dbo.employeeData  \n   SET emp_bankAccountNumber \u003d \u0027133146A0\u0027, emp_SSN \u003d \u0027R-M53550M\u0027  \n   WHERE emp_id \u003d 101;  \nGO  \nSELECT * FROM dbo.auditEmployeeData;  \n\nGO"
}