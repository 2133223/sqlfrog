{
  "funcName": "DECRYPTBYKEYAUTOASYMKEY",
  "arguments": [
    {
      "argument": {
        "arguName": "akey_ID",
        "dataTypes": [
          "int"
        ],
        "description": "The ID of the asymmetric key used to encrypt the symmetric key. akey_ID has an int data type."
      }
    },
    {
      "argument": {
        "arguName": "akey_password",
        "dataTypes": [
          "nvarchar"
        ],
        "description": "The password protecting the asymmetric key. akey_password can have a NULL value if the database master key protects the asymmetric private key. akey_password has an nvarchar data type."
      }
    },
    {
      "argument": {
        "arguName": "@ciphertext",
        "dataTypes": [
          "varbinary"
        ],
        "description": "A variable of type varbinary containing data encrypted with the symmetric key."
      }
    },
    {
      "argument": {
        "arguName": "add_authenticator",
        "dataTypes": [
          "int"
        ],
        "description": "Indicates whether the original encryption process included, and encrypted, an authenticator together with the plaintext. Must match the value passed to ENCRYPTBYKEY (Transact-SQL) during the data encryption process. add_authenticator has a value of 1 if the encryption process used an authenticator. add_authenticator has an int data type."
      }
    },
    {
      "argument": {
        "arguName": "@add_authenticator",
        "dataTypes": [
          "int"
        ],
        "description": "A variable indicating whether the original encryption process included, and encrypted, an authenticator together with the plaintext. Must match the value passed to ENCRYPTBYKEY (Transact-SQL) during the data encryption process. @add_authenticator has an int data type."
      }
    },
    {
      "argument": {
        "arguName": "authenticator",
        "dataTypes": [],
        "description": "The data used as the basis for the generation of the authenticator. Must match the value supplied to ENCRYPTBYKEY (Transact-SQL). authenticator has a sysname data type."
      }
    },
    {
      "argument": {
        "arguName": "@authenticator",
        "dataTypes": [],
        "description": "A variable containing data from which an authenticator generates. Must match the value supplied to ENCRYPTBYKEY (Transact-SQL). @authenticator has a sysname data type."
      }
    },
    {
      "argument": {
        "arguName": "@add_authenticator",
        "dataTypes": [
          "int"
        ],
        "description": "A variable indicating whether the original encryption process included, and encrypted, an authenticator together with the plaintext. Must match the value passed to ENCRYPTBYKEY (Transact-SQL) during the data encryption process. @add_authenticator has an int data type."
      }
    },
    {
      "argument": {
        "arguName": "authenticator",
        "dataTypes": [],
        "description": "The data used as the basis for the generation of the authenticator. Must match the value supplied to ENCRYPTBYKEY (Transact-SQL). authenticator has a sysname data type."
      }
    },
    {
      "argument": {
        "arguName": "@authenticator",
        "dataTypes": [],
        "description": "A variable containing data from which an authenticator generates. Must match the value supplied to ENCRYPTBYKEY (Transact-SQL). @authenticator has a sysname data type."
      }
    }
  ],
  "returnType": "varbinary, with a maximum size of 8,000 bytes.",
  "description": "This function decrypts encrypted data. To do this, it first decrypts a symmetric key with a separate asymmetric key, and then decrypts the encrypted data with the symmetric key extracted in the first \"step\".",
  "targetDBs": [
    "SQL Server (starting with 2008)"
  ],
  "category": "Cryptographic",
  "ansiCompatible": "",
  "package": "",
  "docLink": "https://docs.microsoft.com/en-gb/sql/t-sql/functions/decryptbykeyautoasymkey-transact-sql?view\u003dsql-server-2017",
  "sample": "--Create the keys and certificate.  \nUSE AdventureWorks2012;  \nCREATE MASTER KEY ENCRYPTION BY PASSWORD \u003d \u0027mzkvdMlk979438teag$$ds987yghn)(*\u00264fdg^\u0027;  \nOPEN MASTER KEY DECRYPTION BY PASSWORD \u003d \u0027mzkvdMlk979438teag$$ds987yghn)(*\u00264fdg^\u0027;  \nCREATE ASYMMETRIC KEY SSN_AKey   \n    WITH ALGORITHM \u003d RSA_2048 ;   \nGO  \nCREATE SYMMETRIC KEY SSN_Key_02 WITH ALGORITHM \u003d DES  \n    ENCRYPTION BY ASYMMETRIC KEY SSN_AKey;  \nGO  \n--  \n--Add a column of encrypted data.  \nALTER TABLE HumanResources.Employee  \n    ADD EncryptedNationalIDNumber2 varbinary(128);   \nOPEN SYMMETRIC KEY SSN_Key_02  \n   DECRYPTION BY ASYMMETRIC KEY SSN_AKey;  \nUPDATE HumanResources.Employee  \nSET EncryptedNationalIDNumber2  \n    \u003d EncryptByKey(Key_GUID(\u0027SSN_Key_02\u0027), NationalIDNumber);  \nGO  \n--Close the key used to encrypt the data.  \nCLOSE SYMMETRIC KEY SSN_Key_02;  \n--  \n--There are two ways to decrypt the stored data.  \n--  \n--OPTION ONE, using DecryptByKey()  \n--1. Open the symmetric key.  \n--2. Decrypt the data.  \n--3. Close the symmetric key.  \nOPEN SYMMETRIC KEY SSN_Key_02  \n   DECRYPTION BY ASYMMETRIC KEY SSN_AKey;  \nSELECT NationalIDNumber, EncryptedNationalIDNumber2    \n    AS \u0027Encrypted ID Number\u0027,  \n    CONVERT(nvarchar, DecryptByKey(EncryptedNationalIDNumber2))   \n    AS \u0027Decrypted ID Number\u0027  \n    FROM HumanResources.Employee;  \nCLOSE SYMMETRIC KEY SSN_Key_02;  \n--  \n--OPTION TWO, using DecryptByKeyAutoAsymKey()  \nSELECT NationalIDNumber, EncryptedNationalIDNumber2   \n    AS \u0027Encrypted ID Number\u0027,  \n    CONVERT(nvarchar, DecryptByKeyAutoAsymKey ( AsymKey_ID(\u0027SSN_AKey\u0027) , NULL ,EncryptedNationalIDNumber2))   \n    AS \u0027Decrypted ID Number\u0027  \n    FROM HumanResources.Employee;  \nGO"
}