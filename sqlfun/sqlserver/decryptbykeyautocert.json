{
  "funcName": "DECRYPTBYKEYAUTOCERT",
  "arguments": [
    {
      "argument": {
        "arguName": "cert_ID",
        "dataTypes": [
          "int"
        ],
        "description": "The ID of the certificate used to protect the symmetric key. cert_ID has an int data type."
      }
    },
    {
      "argument": {
        "arguName": "cert_password",
        "dataTypes": [
          "nvarchar"
        ],
        "description": "The password used to encrypt the private key of the certificate. Can have a NULL value if the the database master key protects the private key. cert_password has an nvarchar data type."
      }
    },
    {
      "argument": {
        "arguName": "\u0027ciphertext\u0027",
        "dataTypes": [
          "varbinary"
        ],
        "description": "The string of data encrypted with the key. ciphertext has a varbinary data type."
      }
    },
    {
      "argument": {
        "arguName": "@ciphertext",
        "dataTypes": [
          "varbinary"
        ],
        "description": "A variable of type varbinary containing data encrypted with the key."
      }
    },
    {
      "argument": {
        "arguName": "add_authenticator",
        "dataTypes": [
          "int"
        ],
        "description": "Indicates whether the original encryption process included, and encrypted, an authenticator together with the plaintext. Must match the value passed to ENCRYPTBYKEY (Transact-SQL) during the data encryption process. add_authenticator has a value of 1 if the encryption process used an authenticator. add_authenticator has an int data type."
      }
    },
    {
      "argument": {
        "arguName": "@add_authenticator",
        "dataTypes": [
          "int"
        ],
        "description": "A variable indicating whether the original encryption process included, and encrypted, an authenticator together with the plaintext. Must match the value passed to ENCRYPTBYKEY (Transact-SQL) during the data encryption process. @add_authenticator has an int data type."
      }
    },
    {
      "argument": {
        "arguName": "authenticator",
        "dataTypes": [],
        "description": "The data used as the basis for the generation of the authenticator. Must match the value supplied to ENCRYPTBYKEY (Transact-SQL). authenticator has a sysname data type."
      }
    },
    {
      "argument": {
        "arguName": "@authenticator",
        "dataTypes": [],
        "description": "A variable containing data from which an authenticator generates. Must match the value supplied to ENCRYPTBYKEY (Transact-SQL). @authenticator has a sysname data type."
      }
    }
  ],
  "returnType": "varbinary, with a maximum size of 8,000 bytes.",
  "description": "This function decrypts data with a symmetric key. That symmetric key automatically decrypts with a certificate.",
  "targetDBs": [
    "SQL Server (starting with 2008)"
  ],
  "category": "Cryptographic",
  "ansiCompatible": "",
  "package": "",
  "docLink": "https://docs.microsoft.com/en-gb/sql/t-sql/functions/decryptbykeyautocert-transact-sql?view\u003dsql-server-2017",
  "sample": "--Create the keys and certificate.  \nUSE AdventureWorks2012;  \nCREATE MASTER KEY ENCRYPTION BY PASSWORD \u003d \u0027mzkvdlk979438teag$$ds987yghn)(*\u00264fdg^\u0027;  \nOPEN MASTER KEY DECRYPTION BY PASSWORD \u003d \u0027mzkvdlk979438teag$$ds987yghn)(*\u00264fdg^\u0027;  \nCREATE CERTIFICATE HumanResources037   \n   WITH SUBJECT \u003d \u0027Sammamish HR\u0027,   \n   EXPIRY_DATE \u003d \u002710/31/2009\u0027;  \nCREATE SYMMETRIC KEY SSN_Key_01 WITH ALGORITHM \u003d DES  \n    ENCRYPTION BY CERTIFICATE HumanResources037;  \nGO  \n----Add a column of encrypted data.  \nALTER TABLE HumanResources.Employee  \n    ADD EncryptedNationalIDNumber varbinary(128);   \nOPEN SYMMETRIC KEY SSN_Key_01  \n   DECRYPTION BY CERTIFICATE HumanResources037 ;  \nUPDATE HumanResources.Employee  \nSET EncryptedNationalIDNumber  \n    \u003d EncryptByKey(Key_GUID(\u0027SSN_Key_01\u0027), NationalIDNumber);  \nGO  \n--  \n--Close the key used to encrypt the data.  \nCLOSE SYMMETRIC KEY SSN_Key_01;  \n--  \n--There are two ways to decrypt the stored data.  \n--  \n--OPTION ONE, using DecryptByKey()  \n--1. Open the symmetric key  \n--2. Decrypt the data  \n--3. Close the symmetric key  \nOPEN SYMMETRIC KEY SSN_Key_01  \n   DECRYPTION BY CERTIFICATE HumanResources037;  \nSELECT NationalIDNumber, EncryptedNationalIDNumber    \n    AS \u0027Encrypted ID Number\u0027,  \n    CONVERT(nvarchar, DecryptByKey(EncryptedNationalIDNumber))   \n    AS \u0027Decrypted ID Number\u0027  \n    FROM HumanResources.Employee;  \nCLOSE SYMMETRIC KEY SSN_Key_01;  \n--  \n--OPTION TWO, using DecryptByKeyAutoCert()  \nSELECT NationalIDNumber, EncryptedNationalIDNumber   \n    AS \u0027Encrypted ID Number\u0027,  \n    CONVERT(nvarchar, DecryptByKeyAutoCert ( cert_ID(\u0027HumanResources037\u0027) , NULL ,EncryptedNationalIDNumber))   \n    AS \u0027Decrypted ID Number\u0027  \n    FROM HumanResources.Employee;"
}