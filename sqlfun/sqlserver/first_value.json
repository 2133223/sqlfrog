{
  "funcName": "FIRST_VALUE",
  "arguments": [
    {
      "argument": {
        "arguName": "scalar_expression",
        "dataTypes": [],
        "description": "Is the value to be returned. scalar_expression can be a column, subquery, or other arbitrary expression that results in a single value. Other analytic functions are not permitted."
      }
    },
    {
      "argument": {
        "arguName": "OVER ( [ partition_by_clause ] order_by_clause [ rows_range_clause ] )",
        "dataTypes": [],
        "description": "partition_by_clause divides the result set produced by the FROM clause into partitions to which the function is applied. If not specified, the function treats all rows of the query result set as a single group. order_by_clause determines the logical order in which the operation is performed. order_by_clause is required. rows_range_clause further limits the rows within the partition by specifying start and end points. For more information, see OVER Clause (Transact-SQL)."
      }
    }
  ],
  "returnType": "Is the same type as scalar_expression.",
  "description": "Returns the first value in an ordered set of values in SQL Server 2017.",
  "targetDBs": [
    "SQL Server (starting with 2012)",
    "Azure SQL Database",
    "Azure SQL Data Warehouse",
    "Parallel Data Warehouse"
  ],
  "category": "Analytic",
  "ansiCompatible": "",
  "package": "",
  "docLink": "https://docs.microsoft.com/en-gb/sql/t-sql/functions/first-value-transact-sql?view\u003dsql-server-2017",
  "sample": "USE AdventureWorks2012;  \nGO  \nSELECT Name, ListPrice,   \n       FIRST_VALUE(Name) OVER (ORDER BY ListPrice ASC) AS LeastExpensive   \nFROM Production.Product  \nWHERE ProductSubcategoryID \u003d 37;"
}