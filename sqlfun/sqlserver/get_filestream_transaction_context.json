{
  "funcName": "GET_FILESTREAM_TRANSACTION_CONTEXT",
  "description": "Returns a token that represents the current transaction context of a session. The token is used by an application to bind FILESTREAM file-system streaming operations to the transaction. For a list of FILESTREAM topics, see Binary Large Object (Blob) Data (SQL Server).",
  "targetDBs": [
    "SQL Server (starting with 2008)"
  ],
  "category": "System",
  "ansiCompatible": "",
  "package": "",
  "docLink": "https://docs.microsoft.com/en-gb/sql/t-sql/functions/get-filestream-transaction-context-transact-sql?view\u003dsql-server-2017",
  "sample": "using System;  \nusing System.Data.SqlClient;  \nusing System.Data;  \n\nnamespace ConsoleApplication  \n{  \n    /// \u003csummary\u003e  \n    /// This class is a wrapper that contains methods for:  \n    ///   \n    ///     GetTransactionContect() - Returns the current transaction context.  \n    ///     BeginTransaction() - Begins a transaction.  \n    ///     CommmitTransaction() - Commits the current transaction.  \n    ///   \n    /// \u003c/summary\u003e  \n\n    class SqlAccessWrapper  \n    {  \n        /// \u003csummary\u003e  \n        /// Returns a byte array that contains the current transaction  \n        /// context.  \n        /// \u003c/summary\u003e  \n        /// \u003cparam name\u003d\"sqlConnection\"\u003e  \n        /// SqlConnection object that represents the instance of SQL Server  \n        /// from which to obtain the transaction context.   \n        /// \u003c/param\u003e  \n        /// \u003creturns\u003e  \n        /// If there is a current transaction context, the return  \n        /// value is an Object that represents the context.  \n        /// If there is not a current transaction context, the  \n        /// value returned is DBNull.Value.  \n        /// \u003c/returns\u003e  \n\n        public Object GetTransactionContext(SqlConnection sqlConnection)  \n        {  \n            SqlCommand cmd \u003d new SqlCommand();  \n            cmd.CommandText \u003d \"SELECT GET_FILESTREAM_TRANSACTION_CONTEXT()\";  \n            cmd.CommandType \u003d CommandType.Text;  \n            cmd.Connection \u003d sqlConnection;  \n\n            return cmd.ExecuteScalar();  \n\n        }  \n\n        /// \u003csummary\u003e  \n        /// Begins the transaction.  \n        /// \u003c/summary\u003e  \n        /// \u003cparam name\u003d\"sqlConnection\"\u003e  \n        /// SqlConnection object that represents the server  \n        /// on which to run the BEGIN TRANSACTION statement.  \n        /// \u003c/param\u003e  \n\n        public void BeginTransaction(SqlConnection sqlConnection)  \n        {  \n            SqlCommand cmd \u003d new SqlCommand();  \n\n            cmd.CommandText \u003d \"BEGIN TRANSACTION\";  \n            cmd.CommandType \u003d CommandType.Text;  \n            cmd.Connection \u003d sqlConnection;  \n\n            cmd.ExecuteNonQuery();  \n        }  \n\n        /// \u003csummary\u003e  \n        /// Commits the transaction.  \n        /// \u003c/summary\u003e  \n        /// \u003cparam name\u003d\"sqlConnection\"\u003e  \n        /// SqlConnection object that represents the instance of SQL Server  \n        /// on which to run the COMMIT statement.  \n        /// \u003c/param\u003e  \n\n        public void CommitTransaction(SqlConnection sqlConnection)  \n        {  \n            SqlCommand cmd \u003d new SqlCommand();  \n\n            cmd.CommandText \u003d \"COMMIT TRANSACTION\";  \n            cmd.CommandType \u003d CommandType.Text;  \n            cmd.Connection \u003d sqlConnection;  \n\n            cmd.ExecuteNonQuery();  \n        }  \n    }  \n\n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            //Open a connection to the local instance of SQL Server.  \n\n            SqlConnection sqlConnection \u003d new SqlConnection(\"Integrated Security\u003dtrue;server\u003d(local)\");  \n            sqlConnection.Open();  \n\n            SqlAccessWrapper sql \u003d new SqlAccessWrapper();  \n\n            //Create a transaction so that sql.GetTransactionContext() will succeed.  \n            sql.BeginTransaction(sqlConnection);  \n\n            //The transaction context will be stored in this array.  \n            Byte[] transactionToken;     \n\n            Object txObj \u003d sql.GetTransactionContext(sqlConnection);  \n            if (DBNull.Value !\u003d txObj)  \n            {  \n                transactionToken \u003d (byte[])txObj;  \n                Console.WriteLine(\"Transaction context obtained.\\n\");  \n            }  \n\n            sql.CommitTransaction(sqlConnection);  \n        }  \n    }  \n}"
}