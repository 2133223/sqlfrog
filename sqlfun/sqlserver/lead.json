{
  "funcName": "LEAD",
  "arguments": [
    {
      "argument": {
        "arguName": "scalar_expression",
        "dataTypes": [],
        "description": "The value to be returned based on the specified offset. It is an expression of any type that returns a single (scalar) value. scalar_expression cannot be an analytic function."
      }
    },
    {
      "argument": {
        "arguName": "offset",
        "dataTypes": [
          "bigint"
        ],
        "description": "The number of rows forward from the current row from which to obtain a value. If not specified, the default is 1. offset can be a column, subquery, or other expression that evaluates to a positive integer or can be implicitly converted to bigint. offset cannot be a negative value or an analytic function."
      }
    },
    {
      "argument": {
        "arguName": "default",
        "dataTypes": [],
        "description": "The value to return when scalar_expression at offset is NULL. If a default value is not specified, NULL is returned. default can be a column, subquery, or other expression, but it cannot be an analytic function. default must be type-compatible with scalar_expression."
      }
    },
    {
      "argument": {
        "arguName": "OVER ( [ partition_by_clause ] order_by_clause)",
        "dataTypes": [],
        "description": "partition_by_clause divides the result set produced by the FROM clause into partitions to which the function is applied. If not specified, the function treats all rows of the query result set as a single group. order_by_clause determines the order of the data before the function is applied. When partition_by_clause is specified, it determines the order of the data in each partition. The order_by_clause is required. For more information, see OVER Clause (Transact-SQL)."
      }
    }
  ],
  "returnType": "The data type of the specified scalar_expression. NULL is returned if scalar_expression is nullable or default is set to NULL.",
  "description": "Accesses data from a subsequent row in the same result set without the use of a self-join starting with SQL Server 2012 (11.x). LEAD provides access to a row at a given physical offset that follows the current row. Use this analytic function in a SELECT statement to compare values in the current row with values in a following row.",
  "targetDBs": [
    "SQL Server (starting with 2012)",
    "Azure SQL Database",
    "Azure SQL Data Warehouse",
    "Parallel Data Warehouse"
  ],
  "category": "Analytic",
  "ansiCompatible": "",
  "package": "",
  "docLink": "https://docs.microsoft.com/en-gb/sql/t-sql/functions/lead-transact-sql?view\u003dsql-server-2017",
  "sample": "USE AdventureWorks2012;  \nGO  \nSELECT BusinessEntityID, YEAR(QuotaDate) AS SalesYear, SalesQuota AS CurrentQuota,   \n    LEAD(SalesQuota, 1,0) OVER (ORDER BY YEAR(QuotaDate)) AS NextQuota  \nFROM Sales.SalesPersonQuotaHistory  \nWHERE BusinessEntityID \u003d 275 and YEAR(QuotaDate) IN (\u00272005\u0027,\u00272006\u0027);"
}